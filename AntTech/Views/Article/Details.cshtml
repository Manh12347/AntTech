@model ArticleDetailViewModel

@{
    ViewData["Title"] = string.IsNullOrEmpty(Model?.Title) ? "Chi tiết Bài viết" : Model.Title;
    var currentReturnUrl = Context.Request.Path.ToString();
    if (Context.Request.QueryString.HasValue)
    {
        currentReturnUrl += Context.Request.QueryString.ToString();
    }
}

<div class="article-detail-container container mt-4 mb-5">
    @if (Model != null)
    {
        <!-- TIÊU ĐỀ, TÁC GIẢ, META -->
        <h1 class="article-detail-title">@Model.Title</h1>
        <div class="article-detail-meta mb-3">
            <div class="author-section">
                <a href="@Model.AuthorProfileUrl" title="Xem trang của @Model.AuthorName" class="text-decoration-none">
                    <img src="@Model.AuthorAvatarUrl" alt="Ảnh đại diện của @Model.AuthorName" class="author-avatar-large" />
                </a>
                <div class="author-meta-text">
                    <a href="@Model.AuthorProfileUrl" class="author-name-detail text-decoration-none">@Model.AuthorName</a>
                    <span class="publish-date-detail">@Model.PublishDateFormatted • @Model.ReadingTimeEstimate</span>
                </div>
            </div>
            <div class="article-stats-detail">
                @if (Model.ViewCount > 0)
                {
                    <span title="Lượt xem"><i class="fa-regular fa-eye"></i> @Model.ViewCount</span>
                }
                <span title="Lượt thích bài viết" class="article-like-action action-requires-auth" data-article-id="@Model.ArticleId">
                    <i class="fa-thumbs-up @(Model.IsArticleLikedByCurrentUser ? "fa-solid text-primary" : "fa-regular")"></i>
                    <span class="article-like-count">@Model.LikeCount</span>
                </span>
                <button class="btn btn-sm btn-link text-secondary p-0 ms-2 article-bookmark-action action-requires-auth" title="Lưu bài viết" data-article-id="@Model.ArticleId">
                    <i class="fa-regular fa-bookmark"></i>
                </button>
            </div>
        </div>

        <!-- NỘI DUNG BÀI VIẾT -->
        <div class="article-content-display">
            @if (!string.IsNullOrEmpty(Model.Content))
            {
                @Html.Raw(Model.Content.Replace("![Image](", "<img src=\"").Replace(")", "\" alt=\"Image\" class=\"img-fluid\" />").Replace("\n", "<br />"))
            }
            else
            {
                <p class="text-muted">Không có nội dung.</p>
            }
        </div>

        <!-- TAGS -->
        @if (Model.Tags != null && Model.Tags.Any())
        {
            <div class="article-tags mt-4">
                @foreach (var tag in Model.Tags)
                {
                    <span class="badge bg-secondary me-2">@tag</span>
                }
            </div>
        }

        <!-- PHẦN BÌNH LUẬN -->
        <div class="article-comments-section mt-5 pt-4 border-top">
            @{
                int totalCommentsAndReplies = Model.Comments?.Sum(c => 1 + (c.Replies?.Count ?? 0)) ?? 0;
            }
            <h3 class="comments-title mb-4">Bình luận (@totalCommentsAndReplies)</h3>

            <div class="add-comment-form mb-5">
                <form asp-action="AddComment" asp-controller="Comment" method="post" id="addRootCommentForm" class="requires-auth-form">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="ArticleId" value="@Model.ArticleId" />
                    <div class="mb-3">
                        <textarea name="Content" class="form-control" rows="3" placeholder="Viết bình luận của bạn..." required data-val="true" data-val-required="Vui lòng nhập nội dung bình luận."></textarea>
                        <span data-valmsg-for="Content" data-valmsg-replace="true" class="text-danger"></span>
                    </div>
                    <button type="submit" class="btn btn-primary btn-sm">Gửi bình luận</button>
                </form>
            </div>

            @if (Model.Comments != null && Model.Comments.Any())
            {
                <div class="comment-list">
                    @foreach (var comment in Model.Comments)
                    {
                        @await Html.PartialAsync("~/Views/Shared/_CommentItem.cshtml", comment, new ViewDataDictionary(ViewData) { { "ArticleIdForReply", Model.ArticleId }, { "CurrentPageReturnUrl", currentReturnUrl } })
                    }
                </div>
            }
            else
            {
                <p class="text-muted">Chưa có bình luận nào...</p>
            }
        </div>
    }
    else
    {
        <p class="text-center lead">Không tìm thấy bài viết.</p>
    }
</div>

@section Styles {
    <style>
        .article-detail-container {
            max-width: 850px;
            background-color: #fff;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.07);
        }

        .article-detail-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .author-avatar-large {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .author-name-detail {
            font-weight: 500;
            color: #333;
        }

        .publish-date-detail {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .article-stats-detail {
            display: flex;
            gap: 10px;
            align-items: center;
        }

            .article-stats-detail span {
                font-size: 0.9rem;
                color: #6c757d;
            }

        .article-content-display {
            font-size: 1.1rem;
            line-height: 1.6;
            color: #333;
            white-space: pre-wrap;
            padding: 10px;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 15px;
            word-break: break-word; /* New */
            overflow-wrap: anywhere;
        }

        .article-tags .badge {
            font-size: 0.9rem;
        }

        .comments-title {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .action-requires-auth {
            cursor: pointer;
        }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const isAuthenticated = @(User.Identity != null && User.Identity.IsAuthenticated ? "true" : "false");
            const loginModalElement = document.getElementById('loginPromptModal');
            let loginModalInstance = null;
            if (loginModalElement) {
                loginModalInstance = new bootstrap.Modal(loginModalElement);
            }

            function handleAuthRequiredAction(event) {
                if (!isAuthenticated) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    if (loginModalInstance) {
                        const modalBody = loginModalElement.querySelector('.modal-body');
                        if (modalBody) {
                            const existingReturnUrl = '@currentReturnUrl';
                            const modalFormReturnUrlInput = modalBody.querySelector('form input[name="ReturnUrl"]');
                            if (modalFormReturnUrlInput) {
                                modalFormReturnUrlInput.value = existingReturnUrl;
                            }
                            const modalRegisterLink = modalBody.querySelector('a[asp-action="Register"]');
                            if (modalRegisterLink) {
                                modalRegisterLink.href = `/Account/Register?returnUrl=${encodeURIComponent(existingReturnUrl)}`;
                            }
                        }
                        loginModalInstance.show();
                    } else {
                        window.location.href = '@Url.Action("Login", "Account", new { returnUrl = currentReturnUrl })';
                    }
                    return false;
                }
                return true;
            }

            document.querySelectorAll('form.requires-auth-form').forEach(form => {
                form.addEventListener('submit', handleAuthRequiredAction);
            });

            document.querySelectorAll('.action-requires-auth').forEach(element => {
                element.addEventListener('click', handleAuthRequiredAction);
            });

            document.querySelectorAll('.reply-comment-btn').forEach(button => {
                button.addEventListener('click', function (event) {
                    if (!isAuthenticated) {
                        handleAuthRequiredAction(event);
                        return;
                    }
                    const commentId = this.dataset.commentId;
                    const replyFormContainer = document.getElementById('reply-form-' + commentId);
                    if (replyFormContainer) {
                        document.querySelectorAll('.reply-form-container').forEach(rc => {
                            if (rc.id !== replyFormContainer.id) rc.style.display = 'none';
                        });
                        replyFormContainer.style.display = replyFormContainer.style.display === 'none' ? 'block' : 'none';
                        if (replyFormContainer.style.display === 'block') {
                            replyFormContainer.querySelector('textarea').focus();
                        }
                    }
                });
            });
        });
    </script>
}