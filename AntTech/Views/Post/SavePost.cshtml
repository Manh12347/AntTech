@{
    ViewData["Title"] = "Lưu bài viết";
    var tags = ViewBag.Tags as List<AntTech.Models.Tag> ?? new List<AntTech.Models.Tag>();
}

<header>
    <nav class="navbar">
        <div class="navbar-container">
            <div class="navbar-left">
                <a href="/" class="navbar-logo">AntTech</a>
            </div>
            <div class="navbar-right">
                <button class="btn btn-secondary back-btn" aria-label="Quay lại">
                    <i class="fa-solid fa-arrow-left"></i> Quay lại
                </button>
            </div>
        </div>
    </nav>
</header>

<div class="page-content-wrapper">
    <div class="container">
        <main role="main" class="pb-3">
            <form id="final-post-form">
                <div class="save-post-container">
                    <h1 class="save-post-title">Xem trước và Lưu bài viết</h1>

                    <div class="post-preview">
                        <h2 id="preview-title" class="preview-title"></h2>
                        <div id="preview-content" class="preview-content"></div>
                    </div>

                    <div class="cover-image-section mt-4">
                        <label for="cover-image-input" class="form-label">Ảnh bìa (tùy chọn):</label>
                        <input type="file" id="cover-image-input" class="form-control" accept="image/*" />
                        <div id="cover-image-preview" class="cover-image-preview mt-2" style="display: none;">
                            <img id="cover-image" src="" alt="Ảnh bìa" style="max-width: 100%; border-radius: 4px;" />
                            <button class="btn btn-secondary remove-cover-image mt-2" type="button">Xóa ảnh bìa</button>
                        </div>
                    </div>

                    <div class="form-group mt-4">
                        <label>Chọn danh mục</label>
                        <button type="button" class="btn btn-outline-primary" id="add-category">+ Thêm danh mục</button>
                        <div id="selected-tags" class="mt-2"></div>
                    </div>

                    <div class="form-group mt-4">
                        <label>Thêm tác giả</label>
                        <button type="button" class="btn btn-outline-primary" id="add-author">+ Thêm tác giả</button>
                    </div>

                    <div class="form-buttons mt-4 text-end">
                        <button type="submit" class="btn btn-primary">Tạo</button>
                    </div>
                </div>
            </form>

            <!-- Modal for selecting tags -->
            <div class="modal" id="tagModal" style="display: none;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5>Chọn danh mục</h5>
                        <button type="button" class="close-modal">×</button>
                    </div>
                    <div class="modal-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Chọn</th>
                                    <th>Tên danh mục</th>
                                </tr>
                            </thead>
                            <tbody id="tagTableBody">
                                @foreach (var tag in tags)
                                {
                                    <tr>
                                        <td><input type="checkbox" value="@tag.TagId" data-name="@tag.TagName" /></td>
                                        <td>@tag.TagName</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary close-modal">Đóng</button>
                        <button type="button" class="btn btn-primary" id="confirmTags">Xác nhận</button>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>

<style>
    .save-post-container {
        max-width: 850px;
        margin: 0 auto;
        padding: 2rem;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.07);
    }

    .save-post-title {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
    }

    .post-preview {
        padding: 1rem;
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 1rem;
    }

    .preview-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .preview-content {
        font-size: 1.1rem;
        line-height: 1.6;
        white-space: pre-wrap;
    }

    .tag-chip {
        display: inline-block;
        background-color: #e0e0e0;
        padding: 5px 10px;
        margin: 5px;
        border-radius: 15px;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 5px;
        width: 500px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        border-bottom: 1px solid #ddd;
    }

    .modal-footer {
        border-top: 1px solid #ddd;
        text-align: right;
        padding-top: 10px;
    }

    .close-modal {
        border: none;
        background: none;
        font-size: 24px;
        cursor: pointer;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const draftData = JSON.parse(localStorage.getItem('draftData') || '{}');
            const previewTitle = document.getElementById('preview-title');
            const previewContent = document.getElementById('preview-content');
            const coverImageInput = document.getElementById('cover-image-input');
            const coverImagePreview = document.getElementById('cover-image-preview');
            const coverImage = document.getElementById('cover-image');
            const removeCoverImageBtn = document.querySelector('.remove-cover-image');
            let coverImageUrl = null;

            // Preview post
            previewTitle.textContent = draftData.title || '';
            previewContent.innerHTML = (draftData.content || '').replace(/\n/g, '<br />');

            // Cover image upload
            coverImageInput.addEventListener('change', async (e) => {
                const file = e.target.files[0];
                if (file) {
                    const formData = new FormData();
                    formData.append('image', file);

                    try {
                        const response = await fetch('/api/upload', {
                            method: 'POST',
                            body: formData
                        });
                        const data = await response.json();
                        if (data.url) {
                            coverImage.src = data.url;
                            coverImageUrl = data.url;
                            coverImagePreview.style.display = 'block';
                        } else {
                            throw new Error('No URL returned');
                        }
                    } catch {
                        const fallbackUrl = URL.createObjectURL(file);
                        coverImage.src = fallbackUrl;
                        coverImageUrl = fallbackUrl;
                        coverImagePreview.style.display = 'block';
                    }
                }
            });

            removeCoverImageBtn.addEventListener('click', () => {
                coverImage.src = '';
                coverImageUrl = null;
                coverImagePreview.style.display = 'none';
                coverImageInput.value = '';
            });

            // Back button
            document.querySelector('.back-btn').addEventListener('click', () => {
                window.location.href = '/Post/Index?restore=true';
            });

            // Tags
            let selectedTags = [];
            const tagModal = document.getElementById('tagModal');
            const selectedTagsDiv = document.getElementById('selected-tags');

            document.getElementById('add-category').addEventListener('click', () => {
                document.querySelectorAll('#tagTableBody input[type="checkbox"]').forEach(cb => {
                    cb.checked = selectedTags.includes(parseInt(cb.value));
                });
                tagModal.style.display = 'flex';
            });

            document.querySelectorAll('.close-modal').forEach(btn => {
                btn.addEventListener('click', () => tagModal.style.display = 'none');
            });

            tagModal.addEventListener('click', (e) => {
                if (e.target === tagModal) tagModal.style.display = 'none';
            });

            document.getElementById('confirmTags').addEventListener('click', () => {
                const checkboxes = document.querySelectorAll('#tagTableBody input[type="checkbox"]:checked');
                selectedTags = Array.from(checkboxes).map(cb => parseInt(cb.value));
                const tags = Array.from(checkboxes).map(cb => cb.dataset.name);
                selectedTagsDiv.innerHTML = tags.map(tag => `<span class="tag-chip">${tag}</span>`).join('');
                tagModal.style.display = 'none';
            });

            // Submit
            document.getElementById('final-post-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                const finalPayload = {
                    title: draftData.title,
                    content: draftData.content,
                    imageUrls: draftData.imageUrls || [],
                    coverImageUrl: coverImageUrl,
                    tags: draftData.tags || [],
                    categoryIds: selectedTags
                };

                try {
                    const res = await fetch('/Post/ConfirmSave', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(finalPayload)
                    });

                    if (res.ok) {
                        localStorage.removeItem('draftData');
                        alert('Bài viết đã được lưu thành công!');
                        window.location.href = '/';
                    } else {
                        alert('Lỗi khi lưu bài viết!');
                    }
                } catch (err) {
                    console.error('Error saving post:', err);
                    alert('Lỗi kỹ thuật khi lưu bài viết.');
                }
            });
        });
    </script>
}
